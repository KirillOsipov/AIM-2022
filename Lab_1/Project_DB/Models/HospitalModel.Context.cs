//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OsipovCourseWork.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CourseworkOsipovEntities : DbContext
    {
        public CourseworkOsipovEntities()
            : base("name=CourseworkOsipovEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Гражданин> Гражданин { get; set; }
        public virtual DbSet<Заболевания> Заболевания { get; set; }
        public virtual DbSet<ИзоляцияНаКарантин> ИзоляцияНаКарантин { get; set; }
        public virtual DbSet<Кабинеты> Кабинеты { get; set; }
        public virtual DbSet<ЛекарственныеПрепараты> ЛекарственныеПрепараты { get; set; }
        public virtual DbSet<Лечение> Лечение { get; set; }
        public virtual DbSet<МедицинскийПерсонал> МедицинскийПерсонал { get; set; }
        public virtual DbSet<Оборудование> Оборудование { get; set; }
        public virtual DbSet<Палаты> Палаты { get; set; }
        public virtual DbSet<Пациенты> Пациенты { get; set; }
        public virtual DbSet<Аутентификация> Аутентификация { get; set; }
    
        [DbFunction("CourseworkOsipovEntities", "PriceLessThan")]
        public virtual IQueryable<PriceLessThan_Result> PriceLessThan(Nullable<decimal> maxPrice)
        {
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("maxPrice", maxPrice) :
                new ObjectParameter("maxPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PriceLessThan_Result>("[CourseworkOsipovEntities].[PriceLessThan](@maxPrice)", maxPriceParameter);
        }
    
        public virtual ObjectResult<IncreasePay_Result> IncreasePay(Nullable<decimal> percent, Nullable<long> wardNumber, string way)
        {
            var percentParameter = percent.HasValue ?
                new ObjectParameter("percent", percent) :
                new ObjectParameter("percent", typeof(decimal));
    
            var wardNumberParameter = wardNumber.HasValue ?
                new ObjectParameter("wardNumber", wardNumber) :
                new ObjectParameter("wardNumber", typeof(long));
    
            var wayParameter = way != null ?
                new ObjectParameter("way", way) :
                new ObjectParameter("way", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IncreasePay_Result>("IncreasePay", percentParameter, wardNumberParameter, wayParameter);
        }
    
        public virtual ObjectResult<ModifyDisease_Result> ModifyDisease(string diseaseName, string impact)
        {
            var diseaseNameParameter = diseaseName != null ?
                new ObjectParameter("diseaseName", diseaseName) :
                new ObjectParameter("diseaseName", typeof(string));
    
            var impactParameter = impact != null ?
                new ObjectParameter("impact", impact) :
                new ObjectParameter("impact", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModifyDisease_Result>("ModifyDisease", diseaseNameParameter, impactParameter);
        }
    }
}
